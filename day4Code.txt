package ECommerceApp;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Comparator;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import java.util.Set;
import java.util.function.BinaryOperator;
import java.util.stream.Collectors;
import java.util.stream.IntStream;
import java.util.stream.Stream;

public class Home {

	public static void main(String args[]) {
		Set evenNumbers = Stream.of(1, 2, 3, 4, 5, 6, 2, 3, 4).filter(item -> item % 2 == 0)
				.collect(Collectors.toSet());
		System.out.println(evenNumbers);

//		List<Products> productsArr1=null;
//		Set emptyEvenNumbers=productsArr1.stream()
//				.filter(item -> (item.getPrice() )%2 ==0)
//				.collect(Collectors.toSet());
//				System.out.println(evenNumbers);
		int[] arr = { 0, 1, 2, 3, 4, 5, 6 };

		Arrays.stream(arr, 1, 3).forEach(System.out::println);// 1,2;

		Stream.of(1, 2, 3, 4, 5, 6, 2, 3, 4).filter(item -> item % 2 == 0).collect(Collectors.toSet())
				.forEach(System.out::println);

		List<Products> productList = new ArrayList<>();

		productList.add(new Products(1, 1500, 50, 10, "Laptop", "High performance laptop", "Black", "E001"));
		productList.add(new Products(2, 500, 100, 5, "Smartphone", "Latest model smartphone", "Blue", "E002"));
		productList.add(new Products(3, 200, 30, 0, "Headphones", "Noise-cancelling headphones", "Red", "A003"));
		productList.add(new Products(4, 700, 20, 15, "Smartwatch", "Fitness tracking smartwatch", "White", "E004"));
		productList.add(new Products(5, 100, 200, 20, "USB Drive", "32GB USB flash drive", "Silver", "A005"));
		productList
				.add(new Products(6, 300, 80, 10, "Bluetooth Speaker", "Portable Bluetooth speaker", "Green", "A006"));
		productList.add(new Products(7, 1500, 10, 25, "Tablet", "10-inch display tablet", "Gold", "E001"));

		for (Products product : productList) {
			System.out.println(product);
		}
		List<Orders> orderList = new ArrayList<>();

		Map<Integer, Integer> productQuantityMap1 = new HashMap<>();
		productQuantityMap1.put(1, 1); // 1 Laptop
		productQuantityMap1.put(3, 2); // 2 Headphones

		Orders order1 = new Orders(101, "User1", List.of(productList.get(0), productList.get(2)), productQuantityMap1,
				new Date(), "Credit Card", "Paid");

		Map<Integer, Integer> productQuantityMap2 = new HashMap<>();
		productQuantityMap2.put(4, 1); // 1 Smartwatch
		productQuantityMap2.put(5, 3); // 3 USB Drives

		Orders order2 = new Orders(102, "User2", List.of(productList.get(3), productList.get(4)), productQuantityMap2,
				new Date(), "Debit Card", "Pending");

		Map<Integer, Integer> productQuantityMap3 = new HashMap<>();
		productQuantityMap3.put(6, 2); // 2 Bluetooth Speakers
		productQuantityMap3.put(7, 1); // 1 Tablet

		Orders order3 = new Orders(103, "User3", List.of(productList.get(5), productList.get(6)), productQuantityMap3,
				new Date(), "PayPal", "Paid");

		orderList.add(order1);
		orderList.add(order2);
		orderList.add(order3);

		for (Orders order : orderList) {
			System.out.println(order);
		}
		Comparator<Products> byPrice = Comparator.comparingInt(Products::getPrice);
		BinaryOperator<Products> costlierOf = BinaryOperator.maxBy(byPrice);
		Optional<Products> costliestProduct = productList.stream().reduce(costlierOf);
		System.out.println("Costliest product" + costliestProduct);

		productList.stream().filter(item -> item.getPrice() > 500).forEach(System.out::println);
		int totalCost = productList.stream().collect(Collectors.summingInt(Products::getPrice));
		System.out.println("totalCost" + totalCost);

		// maxPricedProduct=productList.stream()
//                .max((p1, p2) -> Integer.compare(p1.price, p2.price));
//		
		Map<Integer, String> productIdNameMap = productList.stream()
				.collect(Collectors.toMap(product -> product.getProductId(), product -> product.getProductName()));
		System.out.println(productIdNameMap);

		List<Products> sortedList = productList.stream().sorted(Comparator.comparingInt(Products::getQuantityInHand))
				.collect(Collectors.toList());
		System.out.println("SortedList" + sortedList);
		productList.stream().sorted(Comparator.comparingInt(Products::getPrice).thenComparing(Products::getProductName))
				.collect(Collectors.toList()).forEach(System.out::println);
		productList.stream()
				.map(product -> Map.of("productId", product.getProductId(), "productName", product.getProductName()))
				.collect(Collectors.toList()).forEach(System.out::println);
		Map<Integer, List<Products>> collectorMapOfLists = productList.stream()
				.collect(Collectors.groupingBy(Products::getPrice));

		Map<String, List<Products>> data = productList.stream().collect(Collectors.groupingBy(Products::getCategoryId));
		for (Map.Entry<String, List<Products>> entry : data.entrySet()) {
			System.out.println("CategoryId" + entry.getKey());
			System.out.println("Products" + entry.getValue());
			System.out.println("------------------------------");

		}

		Map<String, Map<String, List<Products>>> dataByCategoryByColour = productList.stream()
				.collect(Collectors.groupingBy(Products::getCategoryId, Collectors.groupingBy(Products::getColour)));
		dataByCategoryByColour.forEach((categoryId, colourGroup) -> {
			System.out.println("Category Id" + categoryId);
			colourGroup.forEach((colour, prList) -> {
				System.out.println("Colour" + colour);
				System.out.println("Products List" + prList);
				System.out.println("***************************");
			});

		});

		orderList.stream().filter(order -> {
			return order.getProductsArr().stream().anyMatch(product -> (product.getProductId() == 4));
		}).map(order -> order.getUserId()).collect(Collectors.toList()).forEach(System.out::println);
		// List of all the products ordered
		orderList.stream().flatMap(order -> order.getProductsArr().stream()).forEach(System.out::println);
		Map<String, Long> ordersPerPaymentType = orderList.stream()
				.collect(Collectors.groupingBy(Orders::getPaymentType, Collectors.counting()));
		ordersPerPaymentType.forEach((paymentType, countOfOrders) -> {
			System.out.println("Payment Type" + paymentType + ",Count : " + countOfOrders);
		});
		// Find the total quantity of all products in a particular order
		int totalQuantityForAnOrder = orderList.stream().filter(order -> order.getOrderId() == 103).flatMap(order -> {
			return order.getProductsArr().stream().map(product -> {

				return order.getProductQuantityMap().get(product.getProductId());
			});

		}).mapToInt(Integer::intValue).sum();
		System.out.println("totalQuantityForAnOrder" + totalQuantityForAnOrder);

		int totalOrdersSum = orderList.stream()
				.flatMap(order -> order.getProductsArr().stream()
						.map(product -> product.getPrice() * order.getProductQuantityMap().get(product.getProductId())))
				.mapToInt(Integer::intValue).sum();
		System.out.println("Total of all orders put together" + totalOrdersSum);
		int totalParticularOrderSum = orderList.stream().filter(order -> order.getOrderId() == 103)
				.flatMap(order -> order.getProductsArr().stream()
						.map(product -> product.getPrice() * order.getProductQuantityMap().get(product.getProductId())))
				.mapToInt(Integer::intValue).sum();
		System.out.println("Total of all orders put together" + totalParticularOrderSum);

		orderList.stream()
				.collect(Collectors.toMap(Orders::getOrderId, order -> order.getProductsArr().stream()
						.map(product -> product.getPrice() * order.getProductQuantityMap().get(product.getProductId()))
						.reduce(Integer::sum).orElse(0)))
				.forEach((order, productCount) -> {
					System.out.println(order + "=>" + productCount);
				});

		productList.stream()
				.collect(Collectors.partitioningBy(product -> product.getPrice() > 1000,
						Collectors.partitioningBy(product -> product.getColour().equals("red"))))
				.forEach((isAbove1000, innerpartition) -> {
					System.out.println("Price above 1000" + isAbove1000);
					innerpartition.forEach((isRed, prList) -> {
						System.out.println("Colour is red" + isRed);
						System.out.println("Products" + prList);
					});

				});

		List<Integer> numbers = IntStream.rangeClosed(1, 100).boxed().collect(Collectors.toList());

		// Partition the numbers into ranges
		Map<String, List<Integer>> partitionedNumbers = numbers.stream().collect(Collectors.groupingBy(number -> {
			if (number <= 30) {
				return "0-30";
			} else if (number <= 60) {
				return "31-60";
			} else {
				return "61-100";
			}
		}));

		// Print the partitioned numbers
		partitionedNumbers.forEach((range, nums) -> {
			System.out.println("Range " + range + ": " + nums);
		});

	}

}
